"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', "django-insecure-l66*h3nw(6!f^941vvbjkl2a7d@%z(t8iy0n4h=h!8+fgy%ayz")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    "django_celery_beat",
    "user",
    "home",
    "board",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv('DB_NAME', 'ai_test_prj'),
        "USER": os.getenv('DB_USER', 'ai_admin'),
        "PASSWORD": os.getenv('DB_PASSWORD', 'test1324'),
        "HOST": os.getenv('DB_HOST', 'localhost'),
        "PORT": os.getenv('DB_PORT', '3306'),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    str(BASE_DIR / "static"), # Changed to string conversion
]

# Media files (User-uploaded files)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# OpenAI API Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
OPENAI_MAX_TOKENS = int(os.getenv('OPENAI_MAX_TOKENS', 150))
OPENAI_TEMPERATURE = float(os.getenv('OPENAI_TEMPERATURE', 0.1))

# Login/Logout URLs
LOGIN_URL = '/user/login/'
LOGIN_REDIRECT_URL = '/home/'
LOGOUT_REDIRECT_URL = '/'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 30,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
CORS_ALLOW_CREDENTIALS = True

# DRF Spectacular Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'AI 부동산 검색 서비스 API',
    'DESCRIPTION': 'AI 기반 자연어 질의형 부동산 매물 추천 서비스 API 문서',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'AUTHENTICATION_WHITELIST': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'SECURITY': [
        {
            'sessionAuth': []
        }
    ],
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': '개발 서버'
        },
        {
            'url': 'http://127.0.0.1:8000',
            'description': '로컬 서버'
        }
    ],
    'TAGS': [
        {
            'name': 'home',
            'description': '홈 앱 - 자연어 검색 및 키워드 추출'
        },
        {
            'name': 'board',
            'description': '보드 앱 - 검색 결과 및 추천 매물 관리'
        },
        {
            'name': 'auth',
            'description': '인증 테스트 - 세션 기반 인증 확인'
        }
    ],
    'SCHEMA_PATH_PREFIX': '/api/',
    'SCHEMA_PATH_PREFIX_TRIM': True,
}

# Redis Settings
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_DB = int(os.getenv('REDIS_DB', 0))
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')
REDIS_URL = os.getenv('REDIS_URL', f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}')

# Redis Connection
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_URL,
        'KEY_PREFIX': 'real_estate',
        'TIMEOUT': 300,  # 5 minutes default timeout
    }
}

# Session Storage using Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 1800  # 30 minutes

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery Beat Configuration
CELERY_BEAT_SCHEDULER = os.getenv('CELERY_BEAT_SCHEDULER', 'django_celery_beat.schedulers:DatabaseScheduler')
CELERY_BEAT_ENABLE = os.getenv('CELERY_BEAT_ENABLE', 'True').lower() == 'true'

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'update-recommendations': {
        'task': 'utils.tasks.update_recommendations',
        'schedule': 300.0,  # 5 minutes in seconds
    },
    'backup-redis-to-database': {
        'task': 'utils.tasks.backup_redis_scores_to_database',
        'schedule': 600.0,  # 10 minutes in seconds
    },
}

# Redis Backup Configuration
REDIS_BACKUP_TO_DB = os.getenv('REDIS_BACKUP_TO_DB', 'True').lower() == 'true'

# DRF Spectacular Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'AI 기반 부동산 검색 서비스 API',
    'DESCRIPTION': '''
    자연어 기반 부동산 검색 및 추천 시스템 API

    ## 주요 기능
    - 자연어 검색을 통한 부동산 매물 조회
    - AI 기반 개인화 추천 시스템
    - 세션 기반 인증 시스템
    - Redis 캐시 기반 고속 검색

    ## 인증 방식
    - 세션 기반 인증 (SessionAuthentication)
    - CSRF 토큰 필요
    - credentials: 'include' 설정 필요

    ## 테스트 환경
    - 개발 서버: http://localhost:8000
    - API 베이스 URL: http://localhost:8000/api/
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': 'AI 부동산 검색 서비스',
        'email': 'admin@realestate-ai.com',
    },
    'LICENSE': {
        'name': 'Private License',
    },

    # API 문서 구성
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': False,

    # 스키마 설정
    'SCHEMA_PATH_PREFIX': r'/api/',
    'DEFAULT_GENERATOR_CLASS': 'drf_spectacular.generators.SchemaGenerator',

    # UI 설정
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',

    # 보안 설정
    'SERVE_AUTHENTICATION': ['rest_framework.authentication.SessionAuthentication'],
    'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAuthenticated'],

    # 태그 설정
    'TAGS': [
        {
            'name': 'Home API',
            'description': '홈 페이지 관련 API - 검색 및 인증 테스트'
        },
        {
            'name': 'Board API',
            'description': '게시판 관련 API - 결과 조회 및 추천 시스템'
        },
        {
            'name': 'Authentication',
            'description': '인증 관련 API - 세션 기반 인증 테스트'
        }
    ],

    # 예제 설정
    'ENUM_NAME_OVERRIDES': {
        'ValidationErrorEnum': 'drf_spectacular.plumbing.ValidationErrorEnum.choices',
    },

    # 추가 스키마 설정
    'POSTPROCESSING_HOOKS': [
        'drf_spectacular.hooks.postprocess_schema_enums'
    ],
}
